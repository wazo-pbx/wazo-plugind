swagger: "2.0"
info:
  version: "0.1"
  title: wazo-plugind
  description: "Wazo's plugin management service"
  contact:
    name: Wazo dev team
    url: http://wazo.community
    email: dev@wazo.community
  license:
    name: GPLv3
    url: http://www.gnu.org/licenses/gpl-3.0.html
x-xivo-port: 9503
x-xivo-name: plugind
basePath: /0.1
schemes:
- https
consumes:
- application/json
produces:
- application/json
securityDefinitions:
  xivo_auth_token:
    type: apiKey
    name: X-Auth-Token
    in: header
security:
  - xivo_auth_token: []
paths:
  /config:
    get:
      produces:
        - application/json
      summary: Show the current configuration
      description: '**Required ACL:** `plugind.config.read`'
      operationId: getConfig
      tags:
        - config
      responses:
        '200':
          'description': The configuration of the service
  /market:
    get:
      tags:
        - plugin
        - market
      summary: List plugins available on the configured market
      description: |
        **Required ACL:** `plugind.market.read`

        Allow the administrator to get a list of available plugins
      responses:
        '200':
          description: "The plugin list"
          schema:
            $ref: '#/definitions/GetMarketResult'
  /plugins:
    get:
      tags:
        - plugin
      summary: List installed plugins
      description: |
        **Required ACL:** `plugind.plugins.read`

        Allow the administrator to get a list of all installed plugins
      responses:
        '200':
          description: "The plugin list"
          schema:
            $ref: '#/definitions/GetPluginsResult'
    post:
      tags:
        - plugin
      summary: Install a plugin
      description: |
        **Required ACL:** `plugind.plugins.create`

        Allow the administrator to install a plugin on the server.
      parameters:
        - name: body
          required: True
          in: body
          description: "The plugins' installation parameters"
          schema:
            $ref: '#/definitions/PluginInstallParameters'
      responses:
        '200':
          description: "Installation started"
          schema:
            $ref: '#/definitions/InstallResponse'
        '400':
          $ref: '#/responses/InvalidRequest'
  /plugins/{namespace}/{name}:
    delete:
      tags:
        - plugin
      summary: Uninstall a plugin
      description: |
        **Required ACL:** `plugind.plugins.{namespace}.{name}.delete`

        Allow the administrator to uninstall a plugin.
        ---
      parameters:
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/name'
      responses:
        '204':
          description: "Uninstallation started"
        '400':
          $ref: '#/responses/InvalidRequest'
        '404':
          $ref: '#/responses/NotFoundError'

parameters:
  namespace:
    required: true
    type: string
    name: namespace
    in: path
    description: namespace's plugin
  name:
    required: true
    type: string
    name: name
    in: path
    description: name's plugin

definitions:
  Error:
    title: Error
    description: Error message for the client
    properties:
      message:
        description: Human readable explanation of the error
        type: string
      resource:
        description: Name of the resource
        type: string
      error_id:
        description: Identifier of the type of error. It is more precise than the
          HTTP status code.
        type: string
      details:
        description: Additional information about the error. The keys are specific
          to each error.
        type: object
      timestamp:
        description: Time when the error occured
        type: number
        format: timestamp
  GetMarketResult:
    type: object
    properties:
      total:
        type: integer
        description: The number of plugins available on the market
      items:
        type: array
        items:
          $ref: '#/definitions/PluginMetadata'
        description: A list of plugins
  GetPluginsResult:
    type: object
    properties:
      total:
        type: integer
        description: The number of plugins installed on the system
      items:
        type: array
        items:
          $ref: '#/definitions/PluginMetadata'
        description: A list of plugins
  InstallResponse:
    type: object
    properties:
      uuid:
        type: string
        description: "A UUID associated to this plugin installation"
  PluginInstallParameters:
    type: object
    properties:
      url:
        type: string
        description: "The URL to fetch the plugin"
      method:
        type: string
        description: "The method used to fetch this plugin"
        enum: [git]
      options:
        type: object
        description: "Method dependant installation options"
    required:
      - url
      - method
  PluginMetadata:
    type: object
    properties:
      namespace:
        type: string
        description: "The namespace of the plugin"
      name:
        type: string
        description: "The name of the plugin"
      version:
        type: string
        description: "The version of the installed version"
responses:
  InvalidRequest:
    description: Invalid request
    schema:
      $ref: '#/definitions/Error'
  NotFoundError:
    description: 'Plugin not found'
    schema:
      $ref: '#/definitions/Error'
